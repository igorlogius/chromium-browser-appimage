# This is a basic workflow to help you get started with Actions

name: Release

# when to run
on:
  # manually
  workflow_dispatch:  
  # every 24 hours  
  schedule:
    - cron: "5 5 * * Mo"

jobs:
  # job name 
  chromium-x86_64_build:
    # runner type
    runs-on: ubuntu-16.04

    steps:
      - name: pkg2appimage build
        run: | 
          wget -q -c https://github.com/$(wget -q https://github.com/AppImage/pkg2appimage/releases -O - | grep "pkg2appimage-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2);
          chmod +x ./pkg2appimage-*.AppImage;
          export ARCH=x86_64;
          ./pkg2appimage-*.AppImage Chromium;
          echo "ARTNAME=$(basename out/*.AppImage)" >> $GITHUB_ENV;
          echo "DATE=$(date +%F_%H-%M)" >> $GITHUB_ENV;
      
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{env.DATE}}_${{env.ARTNAME}}
          release_name: ${{env.DATE}}_${{env.ARTNAME}}
          draft: false
          prerelease: false
          
      - name: upload release asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # pulls from CREATE RELEASE step, refs it's ID to get its outputs, which include `upload_url`.
          # ref: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}           
          asset_path: ./out/${{env.ARTNAME}}
          asset_name:  ${{env.ARTNAME}}
          asset_content_type: application/x-iso9660-appimage
          
